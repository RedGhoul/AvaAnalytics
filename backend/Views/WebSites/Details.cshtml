@model SharpCounter.Enities.WebSites
<div class="row">
    <div class="col-md-2">

    </div>
    <div class="col-md-8">
        <div class="text-center">
            <h5 class="display-4">@Model.Name</h5>
        </div>
    </div>
    <div class="col-md-2">

    </div>
</div>
<div class="spacer">

</div>
<div class="row align-items-center">
    <div class="col-3 col-md-5"></div>
    <div class="col-5 col-md-4">
        <div class="btn-group" role="group">
            <a class="btn btn-secondary" asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
            <a class="btn btn-secondary" asp-action="Index">Back to List</a>
        </div>
    </div>
    <div class="col-4 col-md-4"></div>
</div>
<div class="spacer">

</div>
<div class="row">
    <div class="col-md-2">

    </div>
    <div class="col-md-8">
        <div class="text-center">
            <h1>Statistics For The Last 30 Mins</h1>
        </div>
    </div>
    <div class="col-md-2">

    </div>
</div>
<div class="spacer">

</div>
<div class="row">
    <div class="col-12">
        <div id="InteractionStats-text"></div>
        <canvas id="bar-chart-InteractionStats" width="130" height="50"></canvas>
    </div>
</div>
<div class="spacer">

</div>
<div class="row">
    <div class="col-12 col-md-6">
        <div id="BrowserStats-text"></div>
        <canvas id="bar-chart-BrowserStats" width="100" height="50"></canvas>
    </div>
    <div class="col-12 col-md-6">
        <div id="SystemStats-text"></div>
        <canvas id="bar-chart-SystemStats" width="100" height="50"></canvas>
    </div>
</div>
<div class="spacer">

</div>
<div class="row">
    <div class="col-12 col-md-6">
        <div id="ScreenStats-text"></div>
        <canvas id="bar-chart-ScreenStats" width="100" height="50"></canvas>
    </div>
    <div class="col-12 col-md-6">
        <div id="LocationStats-text"></div>
        <canvas id="bar-chart-LocationStats" width="100" height="50"></canvas>
    </div>
</div>

@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js" integrity="sha256-R4pqcOYV8lt7snxMQO/HSbVCFRPMdrhAFMH+vr9giYI=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.2/axios.min.js"
            integrity="sha256-T/f7Sju1ZfNNfBh7skWn0idlCBcI3RwdLSS4/I7NQKQ=" crossorigin="anonymous"></script>
    <script>
        function getDeviceType() {
            const ua = navigator.userAgent;
            if (/(tablet|ipad|playbook|silk)|(android(?!.*mobi))/i.test(ua)) {
                return "tablet";
            }
            if (
                /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|Silk-Accelerated|(hpw|web)OS|Opera M(obi|ini)/.test(
                    ua
                )
            ) {
                return "mobile";
            }
            return "desktop";
        };
        const ISChart = document.getElementById("bar-chart-InteractionStats");
        const BSChart = document.getElementById("bar-chart-BrowserStats");
        const SysSChart = document.getElementById("bar-chart-SystemStats");

        const ScreenSChart = document.getElementById("bar-chart-ScreenStats");
        const LocationSChart = document.getElementById("bar-chart-LocationStats");

        if (getDeviceType() === 'mobile') {
            ISChart.height = 80;
            BSChart.height = 40;
            SysSChart.height = 40;
            ScreenSChart.height = 40;
            LocationSChart.height = 40;
        }
        axios.get('/api/Stats/BrowserStats/@Model.Id')
            .then(function (response) {
                let data = response.data;
                    let Blabels = []
                    let Bdata = []
                    data.forEach(stat => {
                        Blabels.push(stat.browser + " " + stat.version);
                        Bdata.push(stat.count);
                    });
                    console.log(Blabels)
                    console.log(Bdata)
                    let newBSChart = new Chart(BSChart, {
                        type: 'horizontalBar',
                        data: {
                            labels: Blabels,
                            datasets: [
                                {
                                    label: "Counts",
                                    backgroundColor: ["#3e95cd", "#8e5ea2", "#3cba9f", "#e8c3b9", "#c45850"],
                                    data: Bdata
                                }
                            ]
                        },
                        options: {
                            legend: { display: false },
                            title: {
                                fontSize: 14,
                                display: true,
                                text: 'Browser Stats'
                            },
                            scales: {
                                yAxes: [{ ticks: { fontSize: 14, fontFamily: "'Roboto', sans-serif", fontColor: '#000', fontStyle: '500' } }],
                                xAxes: [{
                                    ticks: {
                                        beginAtZero: true,
                                        stepSize: 10,
                                        fontSize: 14, fontFamily: "'Roboto', sans-serif", fontColor: '#000', fontStyle: '500'
                                    }
                                }]
                            }
                        }
                    });

            })
            .catch(function (error) {
                console.log(error);
            })

        axios.get('/api/Stats/InteractionStats/@Model.Id')
            .then(function (response) {
                let data = response.data;
                    let Ilabels = [];
                    let Idata = [];
                    data.forEach(stat => {
                        Ilabels.push(stat.path);
                        Idata.push(stat.total);
                    });
                    new Chart(ISChart, {
                        type: 'horizontalBar',
                        data: {
                            labels: Ilabels,
                            datasets: [
                                {
                                    label: "Counts",
                                    backgroundColor: ["#3e95cd", "#8e5ea2", "#3cba9f", "#e8c3b9", "#c45850"],
                                    data: Idata
                                }
                            ]
                        },
                        options: {
                            legend: { display: false },
                            title: {
                                fontSize: 14,
                                display: true,
                                text: 'Page Interactions'
                            },
                            scales: {
                                yAxes: [{ ticks: { fontSize: 14, fontFamily: "'Roboto', sans-serif", fontColor: '#000', fontStyle: '500' } }],
                                xAxes: [{
                                    ticks: {
                                        beginAtZero: true,
                                        stepSize: 10,
                                        fontSize: 14, fontFamily: "'Roboto', sans-serif", fontColor: '#000', fontStyle: '500'
                                    }
                                }]
                            }
                        }
                    });
            })
            .catch(function (error) {
                console.log(error);
            })


        axios.get('/api/Stats/SystemStats/@Model.Id')
            .then(function (response) {
                let data = response.data;
                    let Slabels = [];
                    let Sdata = [];
                    data.forEach(stat => {
                        Slabels.push(stat.platform + " " + stat.version);
                        Sdata.push(stat.count);
                    });
                    new Chart(SysSChart, {
                        type: 'horizontalBar',
                        data: {
                            labels: Slabels,
                            datasets: [
                                {
                                    label: "Counts",
                                    backgroundColor: ["#3e95cd", "#8e5ea2", "#3cba9f", "#e8c3b9", "#c45850"],
                                    data: Sdata
                                }
                            ]
                        },
                        options: {
                            legend: { display: false },
                            title: {
                                fontSize: 14,
                                display: true,
                                text: 'System Stats'
                            },
                            scales: {
                                yAxes: [{ ticks: { fontSize: 14, fontFamily: "'Roboto', sans-serif", fontColor: '#000', fontStyle: '500' } }],
                                xAxes: [{
                                    ticks: {
                                        beginAtZero: true,
                                        stepSize: 10,
                                        fontSize: 14, fontFamily: "'Roboto', sans-serif", fontColor: '#000', fontStyle: '500'
                                    }
                                }]
                            }
                        }
                    });

            })
            .catch(function (error) {
                console.log(error);
            })

        axios.get('/api/Stats/ScreenSizeStats/@Model.Id')
            .then(function (response) {
                let data = response.data;

                if (data.length === 0) {
                    BSChart.hidden = true;
                    document.getElementById("ScreenStats-text").innerHTML =
                        `<div style="padding-left: 200px">
                            <h3>Nothing Here Yet</h3>
                            <h5>Screen Stats</h5>
                        </div>`
                } else {
                    let Blabels = [
                        'Phones',
                        'Large Phones',
                        'Tables',
                        'Desktops',
                        'Monitors 4K Plus'
                    ]
                    let Bdata = []
                    for (const key of Object.keys(data[0])) {
                        Bdata.push(data[0][key]);
                    }
                    new Chart(ScreenSChart, {
                        type: 'horizontalBar',
                        data: {
                            labels: Blabels,
                            datasets: [
                                {
                                    label: "Counts",
                                    backgroundColor: ["#3e95cd", "#8e5ea2", "#3cba9f", "#e8c3b9", "#c45850"],
                                    data: Bdata
                                }
                            ]
                        },
                        options: {
                            legend: { display: false },
                            title: {
                                fontSize: 14,
                                display: true,
                                text: 'Screen Size Stats'
                            },
                            scales: {
                                yAxes: [{ ticks: { fontSize: 14, fontFamily: "'Roboto', sans-serif", fontColor: '#000', fontStyle: '500' } }],
                                xAxes: [{
                                    ticks: {
                                        beginAtZero: true,
                                        stepSize: 10,
                                        fontSize: 14,
                                        fontFamily: "'Roboto', sans-serif",
                                        fontColor: '#000',
                                        fontStyle: '500'
                                    }
                                }]
                            }
                        }
                    });
                }

            })
            .catch(function (error) {
                console.log(error);
            })

        axios.get('/api/Stats/LocationStats/@Model.Id')
            .then(function (response) {
                let data = response.data;
                    let Blabels = []
                    let Bdata = []
                    data.forEach(stat => {
                        Blabels.push(stat.location);
                        Bdata.push(stat.count);
                    });
                    new Chart(LocationSChart, {
                        type: 'horizontalBar',
                        data: {
                            labels: Blabels,
                            datasets: [
                                {
                                    label: "Counts",
                                    backgroundColor: ["#3e95cd", "#8e5ea2", "#3cba9f", "#e8c3b9", "#c45850"],
                                    data: Bdata
                                }
                            ]
                        },
                        options: {
                            legend: { display: false },
                            title: {
                                fontSize: 14,
                                display: true,
                                text: 'Location Stats'
                            },
                            scales: {
                                yAxes: [{ ticks: { fontSize: 14, fontFamily: "'Roboto', sans-serif", fontColor: '#000', fontStyle: '500' } }],
                                xAxes: [{
                                    ticks: {
                                        beginAtZero: true,
                                        stepSize: 10,
                                        fontSize: 14, fontFamily: "'Roboto', sans-serif", fontColor: '#000', fontStyle: '500'
                                    }
                                }]
                            }
                        }
                    });
            })
            .catch(function (error) {
                console.log(error);
            })

    </script>
}
